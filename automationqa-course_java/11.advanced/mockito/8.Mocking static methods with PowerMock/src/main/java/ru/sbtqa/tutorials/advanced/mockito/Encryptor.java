package ru.sbtqa.tutorials.advanced.mockito;

/**
 * Класс для выполнения различных криптографических операций. Является примером процедурного стиля
 * программирования. Хорошим вариантом было бы превратить этот код в объектно-ориентированный, но
 * здесь мы этого делать не будем.
 */
public class Encryptor {
    /**
     * Инициализация вычислений значений хэш-функции.
     *
     * @param handle массив, который в первом элементе, в случае успешного выполнения метода, будет
     *               содержать значение дескриптора
     * @return 0, если операция выполнена успешно
     */
    public static native int hash_open(long[] handle);

    /**
     * Подсчитывает значение хэш-функции для одной из частей блока данных большого размера.
     *
     * @param handle       дескриптор, возвращаемый функцией cr_hash_open(), характеризующий
     *                     промежуточные значения хэш-функции
     * @param buffer       буфер, в котором содержится часть общего блока данных
     * @param bufferLength размер буфера данных
     * @return 0, если операция выполнена успешно
     */
    public static native int hash_calc(long handle, byte[] buffer, int bufferLength);

    /**
     * Завершение вычисления значения хэш-функции для блока данных.
     *
     * @param handle       дескриптор, возвращаемый функцией cr_hash_open(), характеризующий
     *                     промежуточные значения хэш-функции
     * @param buffer       буфер, в который возвращается результат вычисления значения хэш-функции
     * @param bufferLength на входе содержит максимальную длину буфера hash_result, на выходе -
     *                     реальную возвращенную длину буфера
     * @return 0, если операция выполнена успешно
     */
    public static native int hash_return(long handle, byte[] buffer, int[] bufferLength);

    /**
     * @param handle дескриптор, возвращаемый функцией cr_hash_open(), характеризующий промежуточные
     *               значения хэш-функции
     * @return 0, если операция выполнена успешно
     */
    public static native int hash_close(long handle);

    // ...
}
